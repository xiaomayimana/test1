/*
 * generated by Xtext
 */
package person.zhoujg.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FeatureGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RootDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRootKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInCardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInCardGroupCardinalityParserRuleCall_2_0 = (RuleCall)cInCardAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyFeatureBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//RootDeclaration returns Feature:
		//	"root" name=ID inCard=GroupCardinality? body=FeatureBody?;
		@Override public ParserRule getRule() { return rule; }

		//"root" name=ID inCard=GroupCardinality? body=FeatureBody?
		public Group getGroup() { return cGroup; }

		//"root"
		public Keyword getRootKeyword_0() { return cRootKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//inCard=GroupCardinality?
		public Assignment getInCardAssignment_2() { return cInCardAssignment_2; }

		//GroupCardinality
		public RuleCall getInCardGroupCardinalityParserRuleCall_2_0() { return cInCardGroupCardinalityParserRuleCall_2_0; }

		//body=FeatureBody?
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//FeatureBody
		public RuleCall getBodyFeatureBodyParserRuleCall_3_0() { return cBodyFeatureBodyParserRuleCall_3_0; }
	}

	public class FeatureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOutCardAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOutCardStandaloneCardinalityParserRuleCall_0_0 = (RuleCall)cOutCardAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cFeatureKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0_1_0 = (RuleCall)cNameAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cRefKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRefAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cRefFeatureCrossReference_1_1_1_0 = (CrossReference)cRefAssignment_1_1_1.eContents().get(0);
		private final RuleCall cRefFeatureIDTerminalRuleCall_1_1_1_0_1 = (RuleCall)cRefFeatureCrossReference_1_1_1_0.eContents().get(1);
		private final Assignment cInCardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInCardGroupCardinalityParserRuleCall_2_0 = (RuleCall)cInCardAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyFeatureBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//FeatureDeclaration returns Feature:
		//	outCard=StandaloneCardinality? ("feature" name=ID | "ref" ref=[Feature]) inCard=GroupCardinality? body=FeatureBody?;
		@Override public ParserRule getRule() { return rule; }

		//outCard=StandaloneCardinality? ("feature" name=ID | "ref" ref=[Feature]) inCard=GroupCardinality? body=FeatureBody?
		public Group getGroup() { return cGroup; }

		//outCard=StandaloneCardinality?
		public Assignment getOutCardAssignment_0() { return cOutCardAssignment_0; }

		//StandaloneCardinality
		public RuleCall getOutCardStandaloneCardinalityParserRuleCall_0_0() { return cOutCardStandaloneCardinalityParserRuleCall_0_0; }

		//"feature" name=ID | "ref" ref=[Feature]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"feature" name=ID
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"feature"
		public Keyword getFeatureKeyword_1_0_0() { return cFeatureKeyword_1_0_0; }

		//name=ID
		public Assignment getNameAssignment_1_0_1() { return cNameAssignment_1_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_1_0() { return cNameIDTerminalRuleCall_1_0_1_0; }

		//"ref" ref=[Feature]
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"ref"
		public Keyword getRefKeyword_1_1_0() { return cRefKeyword_1_1_0; }

		//ref=[Feature]
		public Assignment getRefAssignment_1_1_1() { return cRefAssignment_1_1_1; }

		//[Feature]
		public CrossReference getRefFeatureCrossReference_1_1_1_0() { return cRefFeatureCrossReference_1_1_1_0; }

		//ID
		public RuleCall getRefFeatureIDTerminalRuleCall_1_1_1_0_1() { return cRefFeatureIDTerminalRuleCall_1_1_1_0_1; }

		//inCard=GroupCardinality?
		public Assignment getInCardAssignment_2() { return cInCardAssignment_2; }

		//GroupCardinality
		public RuleCall getInCardGroupCardinalityParserRuleCall_2_0() { return cInCardGroupCardinalityParserRuleCall_2_0; }

		//body=FeatureBody?
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//FeatureBody
		public RuleCall getBodyFeatureBodyParserRuleCall_3_0() { return cBodyFeatureBodyParserRuleCall_3_0; }
	}

	public class FeatureBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrsAttributePartParserRuleCall_2_0 = (RuleCall)cAttrsAssignment_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesFeatureDeclarationParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRulesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRuleBodyAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRuleBodyRuleBodyParserRuleCall_4_1_0 = (RuleCall)cRuleBodyAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FeatureBody:
		//	{FeatureBody} "{" attrs=AttributePart? features+=FeatureDeclaration* ("rules" ruleBody=RuleBody)? "}";
		@Override public ParserRule getRule() { return rule; }

		//{FeatureBody} "{" attrs=AttributePart? features+=FeatureDeclaration* ("rules" ruleBody=RuleBody)? "}"
		public Group getGroup() { return cGroup; }

		//{FeatureBody}
		public Action getFeatureBodyAction_0() { return cFeatureBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//attrs=AttributePart?
		public Assignment getAttrsAssignment_2() { return cAttrsAssignment_2; }

		//AttributePart
		public RuleCall getAttrsAttributePartParserRuleCall_2_0() { return cAttrsAttributePartParserRuleCall_2_0; }

		//features+=FeatureDeclaration*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//FeatureDeclaration
		public RuleCall getFeaturesFeatureDeclarationParserRuleCall_3_0() { return cFeaturesFeatureDeclarationParserRuleCall_3_0; }

		//(=> "rules" ruleBody=RuleBody)?
		public Group getGroup_4() { return cGroup_4; }

		//=> "rules"
		public Keyword getRulesKeyword_4_0() { return cRulesKeyword_4_0; }

		//ruleBody=RuleBody
		public Assignment getRuleBodyAssignment_4_1() { return cRuleBodyAssignment_4_1; }

		//RuleBody
		public RuleCall getRuleBodyRuleBodyParserRuleCall_4_1_0() { return cRuleBodyRuleBodyParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class StandaloneCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StandaloneCardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_2_1 = (RuleCall)cGroup_0_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cOptKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//StandaloneCardinality:
		//	("[" INT (".." INT)? "]")+ | "opt";
		@Override public ParserRule getRule() { return rule; }

		//("[" INT (".." INT)? "]")+ | "opt"
		public Alternatives getAlternatives() { return cAlternatives; }

		//("[" INT (".." INT)? "]")+
		public Group getGroup_0() { return cGroup_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }

		//(".." INT)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//".."
		public Keyword getFullStopFullStopKeyword_0_2_0() { return cFullStopFullStopKeyword_0_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_2_1() { return cINTTerminalRuleCall_0_2_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }

		//"opt"
		public Keyword getOptKeyword_1() { return cOptKeyword_1; }
	}

	public class GroupCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupCardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GroupCardinality:
		//	("<" INT (".." INT)? ">")+;
		@Override public ParserRule getRule() { return rule; }

		//("<" INT (".." INT)? ">")+
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//(".." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//".."
		public Keyword getFullStopFullStopKeyword_2_0() { return cFullStopFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class AttributePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributePartAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAttrsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrAttributeParserRuleCall_2_0 = (RuleCall)cAttrAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AttributePart:
		//	{AttributePart} "attrs {" attr+=Attribute* "}";
		@Override public ParserRule getRule() { return rule; }

		//{AttributePart} "attrs {" attr+=Attribute* "}"
		public Group getGroup() { return cGroup; }

		//{AttributePart}
		public Action getAttributePartAction_0() { return cAttributePartAction_0; }

		//"attrs {"
		public Keyword getAttrsKeyword_1() { return cAttrsKeyword_1; }

		//attr+=Attribute*
		public Assignment getAttrAssignment_2() { return cAttrAssignment_2; }

		//Attribute
		public RuleCall getAttrAttributeParserRuleCall_2_0() { return cAttrAttributeParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class RuleBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesFeatureExprParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RuleBody:
		//	{RuleBody} "{" rules+=FeatureExpr* "}";
		@Override public ParserRule getRule() { return rule; }

		//{RuleBody} "{" rules+=FeatureExpr* "}"
		public Group getGroup() { return cGroup; }

		//{RuleBody}
		public Action getRuleBodyAction_0() { return cRuleBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//rules+=FeatureExpr*
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }

		//FeatureExpr
		public RuleCall getRulesFeatureExprParserRuleCall_2_0() { return cRulesFeatureExprParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAttributeTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Attribute returns Feature:
		//	type=AttributeType name=ID;
		@Override public ParserRule getRule() { return rule; }

		//type=AttributeType name=ID
		public Group getGroup() { return cGroup; }

		//type=AttributeType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//AttributeType
		public RuleCall getTypeAttributeTypeEnumRuleCall_0_0() { return cTypeAttributeTypeEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class FeatureExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftLogicExprParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpFeatureOPEnumRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightLogicExprParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//FeatureExpr:
		//	left=LogicExpr op=FeatureOP right=LogicExpr;
		@Override public ParserRule getRule() { return rule; }

		//left=LogicExpr op=FeatureOP right=LogicExpr
		public Group getGroup() { return cGroup; }

		//left=LogicExpr
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//LogicExpr
		public RuleCall getLeftLogicExprParserRuleCall_0_0() { return cLeftLogicExprParserRuleCall_0_0; }

		//op=FeatureOP
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//FeatureOP
		public RuleCall getOpFeatureOPEnumRuleCall_1_0() { return cOpFeatureOPEnumRuleCall_1_0; }

		//right=LogicExpr
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//LogicExpr
		public RuleCall getRightLogicExprParserRuleCall_2_0() { return cRightLogicExprParserRuleCall_2_0; }
	}

	public class LogicExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cLeftLogicExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftLogicExprBasicExprParserRuleCall_1_0 = (RuleCall)cLeftLogicExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cLogicExprLeftLogicExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cLogicOPAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLogicOPLogicOPEnumRuleCall_2_1_0 = (RuleCall)cLogicOPAssignment_2_1.eContents().get(0);
		private final Assignment cRightAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRightBasicExprParserRuleCall_2_2_0 = (RuleCall)cRightAssignment_2_2.eContents().get(0);
		
		//LogicExpr:
		//	("!" | "not")? leftLogicExpr=BasicExpr ({LogicExpr.leftLogicExpr=current} logicOP=LogicOP right=BasicExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//("!" | "not")? leftLogicExpr=BasicExpr ({LogicExpr.leftLogicExpr=current} logicOP=LogicOP right=BasicExpr)*
		public Group getGroup() { return cGroup; }

		//("!" | "not")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }

		//"not"
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }

		//leftLogicExpr=BasicExpr
		public Assignment getLeftLogicExprAssignment_1() { return cLeftLogicExprAssignment_1; }

		//BasicExpr
		public RuleCall getLeftLogicExprBasicExprParserRuleCall_1_0() { return cLeftLogicExprBasicExprParserRuleCall_1_0; }

		//({LogicExpr.leftLogicExpr=current} logicOP=LogicOP right=BasicExpr)*
		public Group getGroup_2() { return cGroup_2; }

		//{LogicExpr.leftLogicExpr=current}
		public Action getLogicExprLeftLogicExprAction_2_0() { return cLogicExprLeftLogicExprAction_2_0; }

		//logicOP=LogicOP
		public Assignment getLogicOPAssignment_2_1() { return cLogicOPAssignment_2_1; }

		//LogicOP
		public RuleCall getLogicOPLogicOPEnumRuleCall_2_1_0() { return cLogicOPLogicOPEnumRuleCall_2_1_0; }

		//right=BasicExpr
		public Assignment getRightAssignment_2_2() { return cRightAssignment_2_2; }

		//BasicExpr
		public RuleCall getRightBasicExprParserRuleCall_2_2_0() { return cRightBasicExprParserRuleCall_2_2_0; }
	}

	public class BasicExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLExprAtomParserRuleCall_0_0 = (RuleCall)cLExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCompOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCompOpComparationOPEnumRuleCall_1_0_0 = (RuleCall)cCompOpAssignment_1_0.eContents().get(0);
		private final Assignment cRExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRExprAtomParserRuleCall_1_1_0 = (RuleCall)cRExprAssignment_1_1.eContents().get(0);
		
		//BasicExpr:
		//	lExpr=Atom (compOp=ComparationOP rExpr=Atom)?;
		@Override public ParserRule getRule() { return rule; }

		//lExpr=Atom (compOp=ComparationOP rExpr=Atom)?
		public Group getGroup() { return cGroup; }

		//lExpr=Atom
		public Assignment getLExprAssignment_0() { return cLExprAssignment_0; }

		//Atom
		public RuleCall getLExprAtomParserRuleCall_0_0() { return cLExprAtomParserRuleCall_0_0; }

		//(compOp=ComparationOP rExpr=Atom)?
		public Group getGroup_1() { return cGroup_1; }

		//compOp=ComparationOP
		public Assignment getCompOpAssignment_1_0() { return cCompOpAssignment_1_0; }

		//ComparationOP
		public RuleCall getCompOpComparationOPEnumRuleCall_1_0_0() { return cCompOpComparationOPEnumRuleCall_1_0_0; }

		//rExpr=Atom
		public Assignment getRExprAssignment_1_1() { return cRExprAssignment_1_1; }

		//Atom
		public RuleCall getRExprAtomParserRuleCall_1_1_0() { return cRExprAtomParserRuleCall_1_1_0; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubLogicExprParserRuleCall_1_1_0 = (RuleCall)cSubAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Atom:
		//	literal=Literal | "(" sub=LogicExpr ")";
		@Override public ParserRule getRule() { return rule; }

		//literal=Literal | "(" sub=LogicExpr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//literal=Literal
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0() { return cLiteralLiteralParserRuleCall_0_0; }

		//"(" sub=LogicExpr ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//sub=LogicExpr
		public Assignment getSubAssignment_1_1() { return cSubAssignment_1_1; }

		//LogicExpr
		public RuleCall getSubLogicExprParserRuleCall_1_1_0() { return cSubLogicExprParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStrAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStrSTRINGTerminalRuleCall_0_0 = (RuleCall)cStrAssignment_0.eContents().get(0);
		private final Assignment cIntAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIntINTTerminalRuleCall_1_0 = (RuleCall)cIntAssignment_1.eContents().get(0);
		private final Assignment cBoolAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBoolBOOLParserRuleCall_2_0 = (RuleCall)cBoolAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final CrossReference cNameFeatureCrossReference_3_0 = (CrossReference)cNameAssignment_3.eContents().get(0);
		private final RuleCall cNameFeatureQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cNameFeatureCrossReference_3_0.eContents().get(1);
		
		//Literal:
		//	str=STRING | int=INT | bool=BOOL | name=[Feature|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//str=STRING | int=INT | bool=BOOL | name=[Feature|QualifiedName]
		public Alternatives getAlternatives() { return cAlternatives; }

		//str=STRING
		public Assignment getStrAssignment_0() { return cStrAssignment_0; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_0_0() { return cStrSTRINGTerminalRuleCall_0_0; }

		//int=INT
		public Assignment getIntAssignment_1() { return cIntAssignment_1; }

		//INT
		public RuleCall getIntINTTerminalRuleCall_1_0() { return cIntINTTerminalRuleCall_1_0; }

		//bool=BOOL
		public Assignment getBoolAssignment_2() { return cBoolAssignment_2; }

		//BOOL
		public RuleCall getBoolBOOLParserRuleCall_2_0() { return cBoolBOOLParserRuleCall_2_0; }

		//name=[Feature|QualifiedName]
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//[Feature|QualifiedName]
		public CrossReference getNameFeatureCrossReference_3_0() { return cNameFeatureCrossReference_3_0; }

		//QualifiedName
		public RuleCall getNameFeatureQualifiedNameParserRuleCall_3_0_1() { return cNameFeatureQualifiedNameParserRuleCall_3_0_1; }
	}

	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOL:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class AttributeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntIntKeyword_0_0 = (Keyword)cIntEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStringStringKeyword_1_0 = (Keyword)cStringEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBoolBoolKeyword_2_0 = (Keyword)cBoolEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AttributeType:
		//	int | string | bool;
		public EnumRule getRule() { return rule; }

		//int | string | bool
		public Alternatives getAlternatives() { return cAlternatives; }

		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_0() { return cIntEnumLiteralDeclaration_0; }

		//"int"
		public Keyword getIntIntKeyword_0_0() { return cIntIntKeyword_0_0; }

		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_1() { return cStringEnumLiteralDeclaration_1; }

		//"string"
		public Keyword getStringStringKeyword_1_0() { return cStringStringKeyword_1_0; }

		//bool
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_2() { return cBoolEnumLiteralDeclaration_2; }

		//"bool"
		public Keyword getBoolBoolKeyword_2_0() { return cBoolBoolKeyword_2_0; }
	}

	public class ComparationOPElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ComparationOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGTGreaterThanSignKeyword_0_0 = (Keyword)cGTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cGEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLTLessThanSignKeyword_3_0 = (Keyword)cLTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLELessThanSignEqualsSignKeyword_4_0 = (Keyword)cLEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNELessThanSignGreaterThanSignKeyword_5_0 = (Keyword)cNEEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ComparationOP:
		//	GT=">" | GE=">=" | EQ="==" | LT="<" | LE="<=" | NE="<>";
		public EnumRule getRule() { return rule; }

		//GT=">" | GE=">=" | EQ="==" | LT="<" | LE="<=" | NE="<>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_0() { return cGTEnumLiteralDeclaration_0; }

		//">"
		public Keyword getGTGreaterThanSignKeyword_0_0() { return cGTGreaterThanSignKeyword_0_0; }

		//GE=">="
		public EnumLiteralDeclaration getGEEnumLiteralDeclaration_1() { return cGEEnumLiteralDeclaration_1; }

		//">="
		public Keyword getGEGreaterThanSignEqualsSignKeyword_1_0() { return cGEGreaterThanSignEqualsSignKeyword_1_0; }

		//EQ="=="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_2() { return cEQEnumLiteralDeclaration_2; }

		//"=="
		public Keyword getEQEqualsSignEqualsSignKeyword_2_0() { return cEQEqualsSignEqualsSignKeyword_2_0; }

		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_3() { return cLTEnumLiteralDeclaration_3; }

		//"<"
		public Keyword getLTLessThanSignKeyword_3_0() { return cLTLessThanSignKeyword_3_0; }

		//LE="<="
		public EnumLiteralDeclaration getLEEnumLiteralDeclaration_4() { return cLEEnumLiteralDeclaration_4; }

		//"<="
		public Keyword getLELessThanSignEqualsSignKeyword_4_0() { return cLELessThanSignEqualsSignKeyword_4_0; }

		//NE="<>"
		public EnumLiteralDeclaration getNEEnumLiteralDeclaration_5() { return cNEEnumLiteralDeclaration_5; }

		//"<>"
		public Keyword getNELessThanSignGreaterThanSignKeyword_5_0() { return cNELessThanSignGreaterThanSignKeyword_5_0; }
	}

	public class FeatureOPElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRECEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRECRecommendKeyword_0_0 = (Keyword)cRECEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREQRequireKeyword_1_0 = (Keyword)cREQEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEXCEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEXCExcludeKeyword_2_0 = (Keyword)cEXCEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cHAREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cHARHarmKeyword_3_0 = (Keyword)cHAREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cREQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cREQHyphenMinusGreaterThanSignKeyword_4_0 = (Keyword)cREQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cEXCEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cEXCLessThanSignHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cEXCEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum FeatureOP:
		//	REC="recommend" | REQ="require" | EXC="exclude" | HAR="harm" | REQ="->" | EXC="<->";
		public EnumRule getRule() { return rule; }

		//REC="recommend" | REQ="require" | EXC="exclude" | HAR="harm" | REQ="->" | EXC="<->"
		public Alternatives getAlternatives() { return cAlternatives; }

		//REC="recommend"
		public EnumLiteralDeclaration getRECEnumLiteralDeclaration_0() { return cRECEnumLiteralDeclaration_0; }

		//"recommend"
		public Keyword getRECRecommendKeyword_0_0() { return cRECRecommendKeyword_0_0; }

		//REQ="require"
		public EnumLiteralDeclaration getREQEnumLiteralDeclaration_1() { return cREQEnumLiteralDeclaration_1; }

		//"require"
		public Keyword getREQRequireKeyword_1_0() { return cREQRequireKeyword_1_0; }

		//EXC="exclude"
		public EnumLiteralDeclaration getEXCEnumLiteralDeclaration_2() { return cEXCEnumLiteralDeclaration_2; }

		//"exclude"
		public Keyword getEXCExcludeKeyword_2_0() { return cEXCExcludeKeyword_2_0; }

		//HAR="harm"
		public EnumLiteralDeclaration getHAREnumLiteralDeclaration_3() { return cHAREnumLiteralDeclaration_3; }

		//"harm"
		public Keyword getHARHarmKeyword_3_0() { return cHARHarmKeyword_3_0; }

		//REQ="->"
		public EnumLiteralDeclaration getREQEnumLiteralDeclaration_4() { return cREQEnumLiteralDeclaration_4; }

		//"->"
		public Keyword getREQHyphenMinusGreaterThanSignKeyword_4_0() { return cREQHyphenMinusGreaterThanSignKeyword_4_0; }

		//EXC="<->"
		public EnumLiteralDeclaration getEXCEnumLiteralDeclaration_5() { return cEXCEnumLiteralDeclaration_5; }

		//"<->"
		public Keyword getEXCLessThanSignHyphenMinusGreaterThanSignKeyword_5_0() { return cEXCLessThanSignHyphenMinusGreaterThanSignKeyword_5_0; }
	}

	public class LogicOPElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LogicOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAndKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOROrKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cANDAmpersandAmpersandKeyword_2_0 = (Keyword)cANDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cORVerticalLineVerticalLineKeyword_3_0 = (Keyword)cOREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum LogicOP:
		//	AND="and" | OR="or" | AND="&&" | OR="||";
		public EnumRule getRule() { return rule; }

		//AND="and" | OR="or" | AND="&&" | OR="||"
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND="and"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }

		//"and"
		public Keyword getANDAndKeyword_0_0() { return cANDAndKeyword_0_0; }

		//OR="or"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }

		//"or"
		public Keyword getOROrKeyword_1_0() { return cOROrKeyword_1_0; }

		//AND="&&"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_2() { return cANDEnumLiteralDeclaration_2; }

		//"&&"
		public Keyword getANDAmpersandAmpersandKeyword_2_0() { return cANDAmpersandAmpersandKeyword_2_0; }

		//OR="||"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_3() { return cOREnumLiteralDeclaration_3; }

		//"||"
		public Keyword getORVerticalLineVerticalLineKeyword_3_0() { return cORVerticalLineVerticalLineKeyword_3_0; }
	}
	
	private final RootDeclarationElements pRootDeclaration;
	private final FeatureDeclarationElements pFeatureDeclaration;
	private final FeatureBodyElements pFeatureBody;
	private final StandaloneCardinalityElements pStandaloneCardinality;
	private final GroupCardinalityElements pGroupCardinality;
	private final AttributePartElements pAttributePart;
	private final RuleBodyElements pRuleBody;
	private final AttributeElements pAttribute;
	private final AttributeTypeElements unknownRuleAttributeType;
	private final FeatureExprElements pFeatureExpr;
	private final LogicExprElements pLogicExpr;
	private final BasicExprElements pBasicExpr;
	private final ComparationOPElements unknownRuleComparationOP;
	private final AtomElements pAtom;
	private final LiteralElements pLiteral;
	private final BOOLElements pBOOL;
	private final QualifiedNameElements pQualifiedName;
	private final FeatureOPElements unknownRuleFeatureOP;
	private final LogicOPElements unknownRuleLogicOP;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FeatureGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRootDeclaration = new RootDeclarationElements();
		this.pFeatureDeclaration = new FeatureDeclarationElements();
		this.pFeatureBody = new FeatureBodyElements();
		this.pStandaloneCardinality = new StandaloneCardinalityElements();
		this.pGroupCardinality = new GroupCardinalityElements();
		this.pAttributePart = new AttributePartElements();
		this.pRuleBody = new RuleBodyElements();
		this.pAttribute = new AttributeElements();
		this.unknownRuleAttributeType = new AttributeTypeElements();
		this.pFeatureExpr = new FeatureExprElements();
		this.pLogicExpr = new LogicExprElements();
		this.pBasicExpr = new BasicExprElements();
		this.unknownRuleComparationOP = new ComparationOPElements();
		this.pAtom = new AtomElements();
		this.pLiteral = new LiteralElements();
		this.pBOOL = new BOOLElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.unknownRuleFeatureOP = new FeatureOPElements();
		this.unknownRuleLogicOP = new LogicOPElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("person.zhoujg.Feature".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RootDeclaration returns Feature:
	//	"root" name=ID inCard=GroupCardinality? body=FeatureBody?;
	public RootDeclarationElements getRootDeclarationAccess() {
		return pRootDeclaration;
	}
	
	public ParserRule getRootDeclarationRule() {
		return getRootDeclarationAccess().getRule();
	}

	//FeatureDeclaration returns Feature:
	//	outCard=StandaloneCardinality? ("feature" name=ID | "ref" ref=[Feature]) inCard=GroupCardinality? body=FeatureBody?;
	public FeatureDeclarationElements getFeatureDeclarationAccess() {
		return pFeatureDeclaration;
	}
	
	public ParserRule getFeatureDeclarationRule() {
		return getFeatureDeclarationAccess().getRule();
	}

	//FeatureBody:
	//	{FeatureBody} "{" attrs=AttributePart? features+=FeatureDeclaration* ("rules" ruleBody=RuleBody)? "}";
	public FeatureBodyElements getFeatureBodyAccess() {
		return pFeatureBody;
	}
	
	public ParserRule getFeatureBodyRule() {
		return getFeatureBodyAccess().getRule();
	}

	//StandaloneCardinality:
	//	("[" INT (".." INT)? "]")+ | "opt";
	public StandaloneCardinalityElements getStandaloneCardinalityAccess() {
		return pStandaloneCardinality;
	}
	
	public ParserRule getStandaloneCardinalityRule() {
		return getStandaloneCardinalityAccess().getRule();
	}

	//GroupCardinality:
	//	("<" INT (".." INT)? ">")+;
	public GroupCardinalityElements getGroupCardinalityAccess() {
		return pGroupCardinality;
	}
	
	public ParserRule getGroupCardinalityRule() {
		return getGroupCardinalityAccess().getRule();
	}

	//AttributePart:
	//	{AttributePart} "attrs {" attr+=Attribute* "}";
	public AttributePartElements getAttributePartAccess() {
		return pAttributePart;
	}
	
	public ParserRule getAttributePartRule() {
		return getAttributePartAccess().getRule();
	}

	//RuleBody:
	//	{RuleBody} "{" rules+=FeatureExpr* "}";
	public RuleBodyElements getRuleBodyAccess() {
		return pRuleBody;
	}
	
	public ParserRule getRuleBodyRule() {
		return getRuleBodyAccess().getRule();
	}

	//Attribute returns Feature:
	//	type=AttributeType name=ID;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//enum AttributeType:
	//	int | string | bool;
	public AttributeTypeElements getAttributeTypeAccess() {
		return unknownRuleAttributeType;
	}
	
	public EnumRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//FeatureExpr:
	//	left=LogicExpr op=FeatureOP right=LogicExpr;
	public FeatureExprElements getFeatureExprAccess() {
		return pFeatureExpr;
	}
	
	public ParserRule getFeatureExprRule() {
		return getFeatureExprAccess().getRule();
	}

	//LogicExpr:
	//	("!" | "not")? leftLogicExpr=BasicExpr ({LogicExpr.leftLogicExpr=current} logicOP=LogicOP right=BasicExpr)*;
	public LogicExprElements getLogicExprAccess() {
		return pLogicExpr;
	}
	
	public ParserRule getLogicExprRule() {
		return getLogicExprAccess().getRule();
	}

	//BasicExpr:
	//	lExpr=Atom (compOp=ComparationOP rExpr=Atom)?;
	public BasicExprElements getBasicExprAccess() {
		return pBasicExpr;
	}
	
	public ParserRule getBasicExprRule() {
		return getBasicExprAccess().getRule();
	}

	//enum ComparationOP:
	//	GT=">" | GE=">=" | EQ="==" | LT="<" | LE="<=" | NE="<>";
	public ComparationOPElements getComparationOPAccess() {
		return unknownRuleComparationOP;
	}
	
	public EnumRule getComparationOPRule() {
		return getComparationOPAccess().getRule();
	}

	//Atom:
	//	literal=Literal | "(" sub=LogicExpr ")";
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//Literal:
	//	str=STRING | int=INT | bool=BOOL | name=[Feature|QualifiedName];
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BOOL:
	//	"true" | "false";
	public BOOLElements getBOOLAccess() {
		return pBOOL;
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//enum FeatureOP:
	//	REC="recommend" | REQ="require" | EXC="exclude" | HAR="harm" | REQ="->" | EXC="<->";
	public FeatureOPElements getFeatureOPAccess() {
		return unknownRuleFeatureOP;
	}
	
	public EnumRule getFeatureOPRule() {
		return getFeatureOPAccess().getRule();
	}

	//enum LogicOP:
	//	AND="and" | OR="or" | AND="&&" | OR="||";
	public LogicOPElements getLogicOPAccess() {
		return unknownRuleLogicOP;
	}
	
	public EnumRule getLogicOPRule() {
		return getLogicOPAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
