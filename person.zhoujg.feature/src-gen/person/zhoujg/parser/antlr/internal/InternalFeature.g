/*
 * generated by Xtext
 */
grammar InternalFeature;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package person.zhoujg.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package person.zhoujg.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import person.zhoujg.services.FeatureGrammarAccess;

}

@parser::members {

 	private FeatureGrammarAccess grammarAccess;
 	
    public InternalFeatureParser(TokenStream input, FeatureGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "RootDeclaration";	
   	}
   	
   	@Override
   	protected FeatureGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRootDeclaration
entryRuleRootDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootDeclarationRule()); }
	 iv_ruleRootDeclaration=ruleRootDeclaration 
	 { $current=$iv_ruleRootDeclaration.current; } 
	 EOF 
;

// Rule RootDeclaration
ruleRootDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='root' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRootDeclarationAccess().getRootKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRootDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRootDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRootDeclarationAccess().getInCardGroupCardinalityParserRuleCall_2_0()); 
	    }
		lv_inCard_2_0=ruleGroupCardinality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootDeclarationRule());
	        }
       		set(
       			$current, 
       			"inCard",
        		lv_inCard_2_0, 
        		"GroupCardinality");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRootDeclarationAccess().getBodyFeatureBodyParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleFeatureBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"FeatureBody");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFeatureDeclaration
entryRuleFeatureDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureDeclarationRule()); }
	 iv_ruleFeatureDeclaration=ruleFeatureDeclaration 
	 { $current=$iv_ruleFeatureDeclaration.current; } 
	 EOF 
;

// Rule FeatureDeclaration
ruleFeatureDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureDeclarationAccess().getOutCardStandaloneCardinalityParserRuleCall_0_0()); 
	    }
		lv_outCard_0_0=ruleStandaloneCardinality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureDeclarationRule());
	        }
       		set(
       			$current, 
       			"outCard",
        		lv_outCard_0_0, 
        		"StandaloneCardinality");
	        afterParserOrEnumRuleCall();
	    }

)
)?((	otherlv_1='feature' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFeatureDeclarationAccess().getFeatureKeyword_1_0_0());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFeatureDeclarationAccess().getNameIDTerminalRuleCall_1_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
    |(	otherlv_3='ref' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFeatureDeclarationAccess().getRefKeyword_1_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureDeclarationRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getFeatureDeclarationAccess().getRefFeatureCrossReference_1_1_1_0()); 
	}

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureDeclarationAccess().getInCardGroupCardinalityParserRuleCall_2_0()); 
	    }
		lv_inCard_5_0=ruleGroupCardinality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureDeclarationRule());
	        }
       		set(
       			$current, 
       			"inCard",
        		lv_inCard_5_0, 
        		"GroupCardinality");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureDeclarationAccess().getBodyFeatureBodyParserRuleCall_3_0()); 
	    }
		lv_body_6_0=ruleFeatureBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_6_0, 
        		"FeatureBody");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFeatureBody
entryRuleFeatureBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureBodyRule()); }
	 iv_ruleFeatureBody=ruleFeatureBody 
	 { $current=$iv_ruleFeatureBody.current; } 
	 EOF 
;

// Rule FeatureBody
ruleFeatureBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFeatureBodyAccess().getFeatureBodyAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFeatureBodyAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureBodyAccess().getAttrsAttributePartParserRuleCall_2_0()); 
	    }
		lv_attrs_2_0=ruleAttributePart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureBodyRule());
	        }
       		set(
       			$current, 
       			"attrs",
        		lv_attrs_2_0, 
        		"AttributePart");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureBodyAccess().getFeaturesFeatureDeclarationParserRuleCall_3_0()); 
	    }
		lv_features_3_0=ruleFeatureDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureBodyRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_3_0, 
        		"FeatureDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(((	'rules' 
)=>	otherlv_4='rules' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFeatureBodyAccess().getRulesKeyword_4_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureBodyAccess().getRuleBodyRuleBodyParserRuleCall_4_1_0()); 
	    }
		lv_ruleBody_5_0=ruleRuleBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureBodyRule());
	        }
       		set(
       			$current, 
       			"ruleBody",
        		lv_ruleBody_5_0, 
        		"RuleBody");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFeatureBodyAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleStandaloneCardinality
entryRuleStandaloneCardinality returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStandaloneCardinalityRule()); } 
	 iv_ruleStandaloneCardinality=ruleStandaloneCardinality 
	 { $current=$iv_ruleStandaloneCardinality.current.getText(); }  
	 EOF 
;

// Rule StandaloneCardinality
ruleStandaloneCardinality returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStandaloneCardinalityAccess().getLeftSquareBracketKeyword_0_0()); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getStandaloneCardinalityAccess().getINTTerminalRuleCall_0_1()); 
    }
(
	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStandaloneCardinalityAccess().getFullStopFullStopKeyword_0_2_0()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getStandaloneCardinalityAccess().getINTTerminalRuleCall_0_2_1()); 
    }
)?
	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStandaloneCardinalityAccess().getRightSquareBracketKeyword_0_3()); 
    }
)+
    |
	kw='opt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStandaloneCardinalityAccess().getOptKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleGroupCardinality
entryRuleGroupCardinality returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupCardinalityRule()); } 
	 iv_ruleGroupCardinality=ruleGroupCardinality 
	 { $current=$iv_ruleGroupCardinality.current.getText(); }  
	 EOF 
;

// Rule GroupCardinality
ruleGroupCardinality returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGroupCardinalityAccess().getLessThanSignKeyword_0()); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getGroupCardinalityAccess().getINTTerminalRuleCall_1()); 
    }
(
	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGroupCardinalityAccess().getFullStopFullStopKeyword_2_0()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getGroupCardinalityAccess().getINTTerminalRuleCall_2_1()); 
    }
)?
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGroupCardinalityAccess().getGreaterThanSignKeyword_3()); 
    }
)+
    ;





// Entry rule entryRuleAttributePart
entryRuleAttributePart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributePartRule()); }
	 iv_ruleAttributePart=ruleAttributePart 
	 { $current=$iv_ruleAttributePart.current; } 
	 EOF 
;

// Rule AttributePart
ruleAttributePart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttributePartAccess().getAttributePartAction_0(),
            $current);
    }
)	otherlv_1='attrs {' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributePartAccess().getAttrsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributePartAccess().getAttrAttributeParserRuleCall_2_0()); 
	    }
		lv_attr_2_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributePartRule());
	        }
       		add(
       			$current, 
       			"attr",
        		lv_attr_2_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAttributePartAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleRuleBody
entryRuleRuleBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleBodyRule()); }
	 iv_ruleRuleBody=ruleRuleBody 
	 { $current=$iv_ruleRuleBody.current; } 
	 EOF 
;

// Rule RuleBody
ruleRuleBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleBodyAccess().getRuleBodyAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleBodyAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleBodyAccess().getRulesFeatureExprParserRuleCall_2_0()); 
	    }
		lv_rules_2_0=ruleFeatureExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleBodyRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_2_0, 
        		"FeatureExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleBodyAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getTypeAttributeTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleAttributeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"AttributeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleFeatureExpr
entryRuleFeatureExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureExprRule()); }
	 iv_ruleFeatureExpr=ruleFeatureExpr 
	 { $current=$iv_ruleFeatureExpr.current; } 
	 EOF 
;

// Rule FeatureExpr
ruleFeatureExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureExprAccess().getLeftLogicExprParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleLogicExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureExprRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"LogicExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureExprAccess().getOpFeatureOPEnumRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleFeatureOP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureExprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"FeatureOP");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureExprAccess().getRightLogicExprParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleLogicExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"LogicExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLogicExpr
entryRuleLogicExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicExprRule()); }
	 iv_ruleLogicExpr=ruleLogicExpr 
	 { $current=$iv_ruleLogicExpr.current; } 
	 EOF 
;

// Rule LogicExpr
ruleLogicExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLogicExprAccess().getExclamationMarkKeyword_0_0());
    }

    |	otherlv_1='not' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLogicExprAccess().getNotKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicExprAccess().getLeftLogicExprBasicExprParserRuleCall_1_0()); 
	    }
		lv_leftLogicExpr_2_0=ruleBasicExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicExprRule());
	        }
       		set(
       			$current, 
       			"leftLogicExpr",
        		lv_leftLogicExpr_2_0, 
        		"BasicExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicExprAccess().getLogicExprLeftLogicExprAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicExprAccess().getLogicOPLogicOPEnumRuleCall_2_1_0()); 
	    }
		lv_logicOP_4_0=ruleLogicOP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicExprRule());
	        }
       		set(
       			$current, 
       			"logicOP",
        		lv_logicOP_4_0, 
        		"LogicOP");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicExprAccess().getRightBasicExprParserRuleCall_2_2_0()); 
	    }
		lv_right_5_0=ruleBasicExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"BasicExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBasicExpr
entryRuleBasicExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicExprRule()); }
	 iv_ruleBasicExpr=ruleBasicExpr 
	 { $current=$iv_ruleBasicExpr.current; } 
	 EOF 
;

// Rule BasicExpr
ruleBasicExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBasicExprAccess().getLExprAtomParserRuleCall_0_0()); 
	    }
		lv_lExpr_0_0=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicExprRule());
	        }
       		set(
       			$current, 
       			"lExpr",
        		lv_lExpr_0_0, 
        		"Atom");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getBasicExprAccess().getCompOpComparationOPEnumRuleCall_1_0_0()); 
	    }
		lv_compOp_1_0=ruleComparationOP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicExprRule());
	        }
       		set(
       			$current, 
       			"compOp",
        		lv_compOp_1_0, 
        		"ComparationOP");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicExprAccess().getRExprAtomParserRuleCall_1_1_0()); 
	    }
		lv_rExpr_2_0=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicExprRule());
	        }
       		set(
       			$current, 
       			"rExpr",
        		lv_rExpr_2_0, 
        		"Atom");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getLiteralLiteralParserRuleCall_0_0()); 
	    }
		lv_literal_0_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_0_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getSubLogicExprParserRuleCall_1_1_0()); 
	    }
		lv_sub_2_0=ruleLogicExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"sub",
        		lv_sub_2_0, 
        		"LogicExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_str_0_0=RULE_STRING
		{
			newLeafNode(lv_str_0_0, grammarAccess.getLiteralAccess().getStrSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"str",
        		lv_str_0_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_int_1_0=RULE_INT
		{
			newLeafNode(lv_int_1_0, grammarAccess.getLiteralAccess().getIntINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"int",
        		lv_int_1_0, 
        		"INT");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getBoolBOOLParserRuleCall_2_0()); 
	    }
		lv_bool_2_0=ruleBOOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"bool",
        		lv_bool_2_0, 
        		"BOOL");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getNameFeatureCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBOOL
entryRuleBOOL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLRule()); } 
	 iv_ruleBOOL=ruleBOOL 
	 { $current=$iv_ruleBOOL.current.getText(); }  
	 EOF 
;

// Rule BOOL
ruleBOOL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Rule AttributeType
ruleAttributeType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='int' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getIntEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAttributeTypeAccess().getIntEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='string' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getStringEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAttributeTypeAccess().getStringEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='bool' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getBoolEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAttributeTypeAccess().getBoolEnumLiteralDeclaration_2()); 
    }
));



// Rule ComparationOP
ruleComparationOP returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='>' 
	{
        $current = grammarAccess.getComparationOPAccess().getGTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparationOPAccess().getGTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='>=' 
	{
        $current = grammarAccess.getComparationOPAccess().getGEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparationOPAccess().getGEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='==' 
	{
        $current = grammarAccess.getComparationOPAccess().getEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparationOPAccess().getEQEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<' 
	{
        $current = grammarAccess.getComparationOPAccess().getLTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparationOPAccess().getLTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='<=' 
	{
        $current = grammarAccess.getComparationOPAccess().getLEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getComparationOPAccess().getLEEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='<>' 
	{
        $current = grammarAccess.getComparationOPAccess().getNEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getComparationOPAccess().getNEEnumLiteralDeclaration_5()); 
    }
));



// Rule FeatureOP
ruleFeatureOP returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='recommend' 
	{
        $current = grammarAccess.getFeatureOPAccess().getRECEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFeatureOPAccess().getRECEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='require' 
	{
        $current = grammarAccess.getFeatureOPAccess().getREQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFeatureOPAccess().getREQEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='exclude' 
	{
        $current = grammarAccess.getFeatureOPAccess().getEXCEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFeatureOPAccess().getEXCEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='harm' 
	{
        $current = grammarAccess.getFeatureOPAccess().getHAREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFeatureOPAccess().getHAREnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='->' 
	{
        $current = grammarAccess.getFeatureOPAccess().getREQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFeatureOPAccess().getREQEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='<->' 
	{
        $current = grammarAccess.getFeatureOPAccess().getEXCEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getFeatureOPAccess().getEXCEnumLiteralDeclaration_5()); 
    }
));



// Rule LogicOP
ruleLogicOP returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='and' 
	{
        $current = grammarAccess.getLogicOPAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicOPAccess().getANDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='or' 
	{
        $current = grammarAccess.getLogicOPAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getLogicOPAccess().getOREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='&&' 
	{
        $current = grammarAccess.getLogicOPAccess().getANDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getLogicOPAccess().getANDEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='||' 
	{
        $current = grammarAccess.getLogicOPAccess().getOREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getLogicOPAccess().getOREnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


