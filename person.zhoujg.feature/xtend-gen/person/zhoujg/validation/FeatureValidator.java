/**
 * generated by Xtext
 */
package person.zhoujg.validation;

import com.google.common.base.Objects;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.validation.Check;
import person.zhoujg.feature.Atom;
import person.zhoujg.feature.AttributeType;
import person.zhoujg.feature.BasicExpr;
import person.zhoujg.feature.Feature;
import person.zhoujg.feature.Literal;
import person.zhoujg.feature.LogicExpr;
import person.zhoujg.util.FeatureUtil;
import person.zhoujg.validation.AbstractFeatureValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class FeatureValidator extends AbstractFeatureValidator {
  @Check
  public Object checkBasicExpressionTying(final BasicExpr expr) {
    Object _xifexpression = null;
    Atom _rExpr = expr.getRExpr();
    boolean _equals = Objects.equal(_rExpr, null);
    if (_equals) {
      Object _xblockexpression = null;
      {
        Atom _lExpr = expr.getLExpr();
        final Literal literal = _lExpr.getLiteral();
        Object _xifexpression_1 = null;
        boolean _equals_1 = Objects.equal(literal, null);
        if (_equals_1) {
          _xifexpression_1 = null;
        } else {
          String _bool = literal.getBool();
          boolean _equals_2 = Objects.equal(_bool, null);
          if (_equals_2) {
            final Feature feature = literal.getName();
            boolean _or = false;
            boolean _equals_3 = Objects.equal(feature, null);
            if (_equals_3) {
              _or = true;
            } else {
              boolean _and = false;
              boolean _isAttribute = FeatureUtil.isAttribute(feature);
              if (!_isAttribute) {
                _and = false;
              } else {
                AttributeType _type = feature.getType();
                boolean _notEquals = (!Objects.equal(_type, AttributeType.BOOL));
                _and = _notEquals;
              }
              _or = _and;
            }
            if (_or) {
              Atom _lExpr_1 = expr.getLExpr();
              EStructuralFeature _eContainingFeature = _lExpr_1.eContainingFeature();
              this.error("Literal should be a bool type here", expr, _eContainingFeature);
            }
          }
        }
        _xblockexpression = _xifexpression_1;
      }
      _xifexpression = _xblockexpression;
    } else {
      Atom _lExpr = expr.getLExpr();
      Atom _rExpr_1 = expr.getRExpr();
      this.checkLeftAndRightType(_lExpr, _rExpr_1, expr);
    }
    return _xifexpression;
  }
  
  public void checkLeftAndRightType(final Atom atom1, final Atom atom2, final BasicExpr expr) {
    AttributeType _atomType = this.getAtomType(atom1);
    AttributeType _atomType_1 = this.getAtomType(atom2);
    boolean _notEquals = (!Objects.equal(_atomType, _atomType_1));
    if (_notEquals) {
      EObject _eContainer = expr.eContainer();
      EStructuralFeature _eContainingFeature = expr.eContainingFeature();
      this.error("Type mismatch around the operator!", _eContainer, _eContainingFeature);
    }
  }
  
  private AttributeType getAtomType(final Atom atom) {
    AttributeType _xifexpression = null;
    LogicExpr _sub = atom.getSub();
    boolean _notEquals = (!Objects.equal(_sub, null));
    if (_notEquals) {
      _xifexpression = AttributeType.BOOL;
    } else {
      AttributeType _xifexpression_1 = null;
      Literal _literal = atom.getLiteral();
      String _str = _literal.getStr();
      boolean _notEquals_1 = (!Objects.equal(_str, null));
      if (_notEquals_1) {
        _xifexpression_1 = AttributeType.STRING;
      } else {
        AttributeType _xifexpression_2 = null;
        Literal _literal_1 = atom.getLiteral();
        String _bool = _literal_1.getBool();
        boolean _notEquals_2 = (!Objects.equal(_bool, null));
        if (_notEquals_2) {
          _xifexpression_2 = AttributeType.BOOL;
        } else {
          AttributeType _xifexpression_3 = null;
          Literal _literal_2 = atom.getLiteral();
          Feature _name = _literal_2.getName();
          boolean _notEquals_3 = (!Objects.equal(_name, null));
          if (_notEquals_3) {
            AttributeType _xifexpression_4 = null;
            Literal _literal_3 = atom.getLiteral();
            Feature _name_1 = _literal_3.getName();
            boolean _isAttribute = FeatureUtil.isAttribute(_name_1);
            boolean _not = (!_isAttribute);
            if (_not) {
              _xifexpression_4 = AttributeType.BOOL;
            } else {
              Literal _literal_4 = atom.getLiteral();
              Feature _name_2 = _literal_4.getName();
              _xifexpression_4 = _name_2.getType();
            }
            _xifexpression_3 = _xifexpression_4;
          } else {
            _xifexpression_3 = AttributeType.INT;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
}
