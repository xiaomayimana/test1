/*
 * generated by Xtext
 */
package person.zhoujg.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import person.zhoujg.services.FeatureGrammarAccess;

public class FeatureParser extends AbstractContentAssistParser {
	
	@Inject
	private FeatureGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected person.zhoujg.ui.contentassist.antlr.internal.InternalFeatureParser createParser() {
		person.zhoujg.ui.contentassist.antlr.internal.InternalFeatureParser result = new person.zhoujg.ui.contentassist.antlr.internal.InternalFeatureParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFeatureDeclarationAccess().getAlternatives_1(), "rule__FeatureDeclaration__Alternatives_1");
					put(grammarAccess.getStandaloneCardinalityAccess().getAlternatives(), "rule__StandaloneCardinality__Alternatives");
					put(grammarAccess.getLogicExprAccess().getAlternatives_0(), "rule__LogicExpr__Alternatives_0");
					put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getBOOLAccess().getAlternatives(), "rule__BOOL__Alternatives");
					put(grammarAccess.getAttributeTypeAccess().getAlternatives(), "rule__AttributeType__Alternatives");
					put(grammarAccess.getComparationOPAccess().getAlternatives(), "rule__ComparationOP__Alternatives");
					put(grammarAccess.getFeatureOPAccess().getAlternatives(), "rule__FeatureOP__Alternatives");
					put(grammarAccess.getLogicOPAccess().getAlternatives(), "rule__LogicOP__Alternatives");
					put(grammarAccess.getRootDeclarationAccess().getGroup(), "rule__RootDeclaration__Group__0");
					put(grammarAccess.getFeatureDeclarationAccess().getGroup(), "rule__FeatureDeclaration__Group__0");
					put(grammarAccess.getFeatureDeclarationAccess().getGroup_1_0(), "rule__FeatureDeclaration__Group_1_0__0");
					put(grammarAccess.getFeatureDeclarationAccess().getGroup_1_1(), "rule__FeatureDeclaration__Group_1_1__0");
					put(grammarAccess.getFeatureBodyAccess().getGroup(), "rule__FeatureBody__Group__0");
					put(grammarAccess.getFeatureBodyAccess().getGroup_4(), "rule__FeatureBody__Group_4__0");
					put(grammarAccess.getStandaloneCardinalityAccess().getGroup_0(), "rule__StandaloneCardinality__Group_0__0");
					put(grammarAccess.getStandaloneCardinalityAccess().getGroup_0_2(), "rule__StandaloneCardinality__Group_0_2__0");
					put(grammarAccess.getGroupCardinalityAccess().getGroup(), "rule__GroupCardinality__Group__0");
					put(grammarAccess.getGroupCardinalityAccess().getGroup_2(), "rule__GroupCardinality__Group_2__0");
					put(grammarAccess.getAttributePartAccess().getGroup(), "rule__AttributePart__Group__0");
					put(grammarAccess.getRuleBodyAccess().getGroup(), "rule__RuleBody__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getFeatureExprAccess().getGroup(), "rule__FeatureExpr__Group__0");
					put(grammarAccess.getLogicExprAccess().getGroup(), "rule__LogicExpr__Group__0");
					put(grammarAccess.getLogicExprAccess().getGroup_2(), "rule__LogicExpr__Group_2__0");
					put(grammarAccess.getBasicExprAccess().getGroup(), "rule__BasicExpr__Group__0");
					put(grammarAccess.getBasicExprAccess().getGroup_1(), "rule__BasicExpr__Group_1__0");
					put(grammarAccess.getAtomAccess().getGroup_1(), "rule__Atom__Group_1__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getRootDeclarationAccess().getNameAssignment_1(), "rule__RootDeclaration__NameAssignment_1");
					put(grammarAccess.getRootDeclarationAccess().getInCardAssignment_2(), "rule__RootDeclaration__InCardAssignment_2");
					put(grammarAccess.getRootDeclarationAccess().getBodyAssignment_3(), "rule__RootDeclaration__BodyAssignment_3");
					put(grammarAccess.getFeatureDeclarationAccess().getOutCardAssignment_0(), "rule__FeatureDeclaration__OutCardAssignment_0");
					put(grammarAccess.getFeatureDeclarationAccess().getNameAssignment_1_0_1(), "rule__FeatureDeclaration__NameAssignment_1_0_1");
					put(grammarAccess.getFeatureDeclarationAccess().getRefAssignment_1_1_1(), "rule__FeatureDeclaration__RefAssignment_1_1_1");
					put(grammarAccess.getFeatureDeclarationAccess().getInCardAssignment_2(), "rule__FeatureDeclaration__InCardAssignment_2");
					put(grammarAccess.getFeatureDeclarationAccess().getBodyAssignment_3(), "rule__FeatureDeclaration__BodyAssignment_3");
					put(grammarAccess.getFeatureBodyAccess().getAttrsAssignment_2(), "rule__FeatureBody__AttrsAssignment_2");
					put(grammarAccess.getFeatureBodyAccess().getFeaturesAssignment_3(), "rule__FeatureBody__FeaturesAssignment_3");
					put(grammarAccess.getFeatureBodyAccess().getRuleBodyAssignment_4_1(), "rule__FeatureBody__RuleBodyAssignment_4_1");
					put(grammarAccess.getAttributePartAccess().getAttrAssignment_2(), "rule__AttributePart__AttrAssignment_2");
					put(grammarAccess.getRuleBodyAccess().getRulesAssignment_2(), "rule__RuleBody__RulesAssignment_2");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_0(), "rule__Attribute__TypeAssignment_0");
					put(grammarAccess.getAttributeAccess().getNameAssignment_1(), "rule__Attribute__NameAssignment_1");
					put(grammarAccess.getFeatureExprAccess().getLeftAssignment_0(), "rule__FeatureExpr__LeftAssignment_0");
					put(grammarAccess.getFeatureExprAccess().getOpAssignment_1(), "rule__FeatureExpr__OpAssignment_1");
					put(grammarAccess.getFeatureExprAccess().getRightAssignment_2(), "rule__FeatureExpr__RightAssignment_2");
					put(grammarAccess.getLogicExprAccess().getLeftLogicExprAssignment_1(), "rule__LogicExpr__LeftLogicExprAssignment_1");
					put(grammarAccess.getLogicExprAccess().getLogicOPAssignment_2_1(), "rule__LogicExpr__LogicOPAssignment_2_1");
					put(grammarAccess.getLogicExprAccess().getRightAssignment_2_2(), "rule__LogicExpr__RightAssignment_2_2");
					put(grammarAccess.getBasicExprAccess().getLExprAssignment_0(), "rule__BasicExpr__LExprAssignment_0");
					put(grammarAccess.getBasicExprAccess().getCompOpAssignment_1_0(), "rule__BasicExpr__CompOpAssignment_1_0");
					put(grammarAccess.getBasicExprAccess().getRExprAssignment_1_1(), "rule__BasicExpr__RExprAssignment_1_1");
					put(grammarAccess.getAtomAccess().getLiteralAssignment_0(), "rule__Atom__LiteralAssignment_0");
					put(grammarAccess.getAtomAccess().getSubAssignment_1_1(), "rule__Atom__SubAssignment_1_1");
					put(grammarAccess.getLiteralAccess().getStrAssignment_0(), "rule__Literal__StrAssignment_0");
					put(grammarAccess.getLiteralAccess().getIntAssignment_1(), "rule__Literal__IntAssignment_1");
					put(grammarAccess.getLiteralAccess().getBoolAssignment_2(), "rule__Literal__BoolAssignment_2");
					put(grammarAccess.getLiteralAccess().getNameAssignment_3(), "rule__Literal__NameAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			person.zhoujg.ui.contentassist.antlr.internal.InternalFeatureParser typedParser = (person.zhoujg.ui.contentassist.antlr.internal.InternalFeatureParser) parser;
			typedParser.entryRuleRootDeclaration();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public FeatureGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(FeatureGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
